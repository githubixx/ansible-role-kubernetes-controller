---
- name: Create group that runs K8s Control Plane processes
  when:
    - k8s_run_as_group != "root"
  ansible.builtin.group:
    name: "{{ k8s_run_as_group }}"
    state: present
    system: "{{ k8s_run_as_group_system }}"
    gid: "{{ k8s_run_as_group_gid | default(omit) }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Create user that runs K8s Control Plane processes
  when:
    - k8s_run_as_user != "root"
  ansible.builtin.user:
    name: "{{ k8s_run_as_user }}"
    state: present
    shell: "{{ k8s_run_as_user_shell }}"
    system: "{{ k8s_run_as_user_system | bool }}"
    create_home: "{{ k8s_run_as_user_home is defined and k8s_run_as_user_system != true }}"
    home: "{{ k8s_run_as_user_home | default(omit) }}"
    uid: "{{ k8s_run_as_user_uid | default(omit) }}"
    group: "{{ k8s_run_as_group }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Create base directory for K8s services log files
  ansible.builtin.file:
    path: "{{ k8s_ctl_log_base_dir }}"
    state: directory
    mode: "{{ k8s_ctl_log_base_dir_mode }}"
    owner: "{{ k8s_run_as_user }}"
    group: "{{ k8s_run_as_group }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Create directory to store kube-apiserver audit logs
  ansible.builtin.file:
    path: "{{ k8s_apiserver_audit_log_dir }}"
    state: directory
    mode: "0750"
    owner: "{{ k8s_run_as_user }}"
    group: "{{ k8s_run_as_group }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Create directory for K8s control plane binaries
  ansible.builtin.file:
    path: "{{ k8s_ctl_bin_dir }}"
    state: directory
    mode: "0755"
    owner: "root"
    group: "root"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Create control plane configuration base directory
  ansible.builtin.file:
    path: "{{ k8s_ctl_conf_dir }}"
    state: directory
    mode: "0750"
    owner: "root"
    group: "{{ k8s_run_as_group }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Create PKI directory
  ansible.builtin.file:
    path: "{{ k8s_ctl_pki_dir }}"
    state: directory
    mode: "0750"
    owner: "root"
    group: "{{ k8s_run_as_group }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Create kube-apiserver config directory
  ansible.builtin.file:
    path: "{{ k8s_apiserver_conf_dir }}"
    state: directory
    mode: "0750"
    owner: "root"
    group: "{{ k8s_run_as_group }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Create kube-controller-manager config directory
  ansible.builtin.file:
    path: "{{ k8s_controller_manager_conf_dir }}"
    state: directory
    mode: "0750"
    owner: "root"
    group: "{{ k8s_run_as_group }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Create kube-scheduler config directory
  ansible.builtin.file:
    path: "{{ k8s_scheduler_conf_dir }}"
    state: directory
    mode: "0750"
    owner: "root"
    group: "{{ k8s_run_as_group }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Create kube-scheduler.yaml
  ansible.builtin.template:
    src: "templates/etc/kubernetes/controller/kube-scheduler/kube-scheduler.yaml.j2"
    dest: "{{ k8s_scheduler_conf_dir }}/kube-scheduler.yaml"
    mode: 0440
    owner: "root"
    group: "{{ k8s_run_as_group }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Copy etcd certificates
  ansible.builtin.copy:
    src: "{{ k8s_ctl_ca_conf_directory }}/{{ item }}"
    dest: "{{ k8s_ctl_pki_dir }}/{{ item }}"
    mode: 0440
    owner: "root"
    group: "{{ k8s_run_as_group }}"
  with_items:
    - "{{ k8s_ctl_etcd_certificates }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Copy Kubernetes certificates
  ansible.builtin.copy:
    src: "{{ k8s_ctl_ca_conf_directory }}/{{ item }}"
    dest: "{{ k8s_ctl_pki_dir }}/{{ item }}"
    mode: 0440
    owner: "root"
    group: "{{ k8s_run_as_group }}"
  with_items:
    - "{{ k8s_ctl_certificates }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Downloading official Kubernetes binaries
  ansible.builtin.get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/v{{ k8s_ctl_release }}/bin/linux/amd64/{{ item }}"
    checksum: "sha512:https://storage.googleapis.com/kubernetes-release/release/v{{ k8s_ctl_release }}/bin/linux/amd64/{{ item }}.sha512"
    dest: "{{ k8s_ctl_bin_dir }}"
    owner: "root"
    group: "root"
    mode: 0755
  with_items:
    - "{{ k8s_ctl_binaries }}"
  notify:
    - Restart kube-apiserver
    - Restart kube-controller-manager
    - Restart kube-scheduler
  tags:
    - k8s-controller

- name: Create kube-scheduler kubeconfig
  ansible.builtin.include_tasks:
    file: "authconfig/kube-scheduler.yml"
  tags:
    - k8s-controller
    - k8s-controller-auth-config-scheduler

- name: Create kube-controller-manager kubeconfig
  ansible.builtin.include_tasks:
    file: "authconfig/kube-controller-manager.yml"
  tags:
    - k8s-controller
    - k8s-controller-auth-config-controller-manager

- name: Create admin user kubeconfig
  ansible.builtin.include_tasks:
    file: "authconfig/kube-admin-user.yml"
  tags:
    - k8s-controller
    - k8s-controller-auth-config-admin-user

- name: Create encryption-config.yaml
  ansible.builtin.copy:
    content: "{{ k8s_apiserver_encryption_provider_config }}"
    dest: "{{ k8s_apiserver_conf_dir }}/encryption-config.yaml"
    mode: 0660
    owner: "root"
    group: "{{ k8s_run_as_group }}"
  tags:
    - k8s-controller
    - k8s-controller-base

- name: Combine k8s_apiserver_settings and k8s_apiserver_settings_user (if defined)
  ansible.builtin.set_fact:
    k8s_apiserver_settings: "{{ k8s_apiserver_settings | combine(k8s_apiserver_settings_user | default({})) }}"
  tags:
    - k8s-controller

- name: Create systemd unit file for kube-apiserver
  ansible.builtin.template:
    src: etc/systemd/system/kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Restart kube-apiserver
  tags:
    - k8s-controller

- name: Enable and start kube-apiserver
  ansible.builtin.service:
    name: kube-apiserver
    enabled: true
    state: started
  tags:
    - k8s-controller

- name: Combine k8s_controller_manager_settings and k8s_controller_manager_settings_user (if defined)
  ansible.builtin.set_fact:
    k8s_controller_manager_settings: "{{ k8s_controller_manager_settings | combine(k8s_controller_manager_settings_user | default({})) }}"
  tags:
    - k8s-controller

- name: Create systemd unit file for kube-controller-manager
  ansible.builtin.template:
    src: etc/systemd/system/kube-controller-manager.service.j2
    dest: /etc/systemd/system/kube-controller-manager.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Restart kube-controller-manager
  tags:
    - k8s-controller

- name: Enable and start kube-controller-manager
  ansible.builtin.service:
    name: kube-controller-manager
    enabled: true
    state: started
  tags:
    - k8s-controller

- name: Combine k8s_scheduler_settings and k8s_scheduler_settings_user (if defined)
  ansible.builtin.set_fact:
    k8s_scheduler_settings: "{{ k8s_scheduler_settings | combine(k8s_scheduler_settings_user | default({})) }}"
  tags:
    - k8s-controller

- name: Create systemd unit file for kube-scheduler
  ansible.builtin.template:
    src: etc/systemd/system/kube-scheduler.service.j2
    dest: /etc/systemd/system/kube-scheduler.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Restart kube-scheduler
  tags:
    - k8s-controller

- name: Enable and start kube-scheduler
  ansible.builtin.service:
    name: kube-scheduler
    enabled: true
    state: started
  tags:
    - k8s-controller

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Wait 300 seconds for kube-apiserver to become ready
  ansible.builtin.wait_for:
    host: "{{ k8s_ctl_api_endpoint_host }}"
    port: "{{ k8s_ctl_api_endpoint_port }}"
    delay: 5
  tags:
    - k8s-controller

- name: Apply kube-apiserver-to-kubelet ClusterRole and ClusterRoleBinding
  tags:
    - k8s-controller
  block:
    - name: Create temporary directory
      ansible.builtin.tempfile:
        state: directory
      register: k8s_ctl__tmp_dir
      delegate_to: "{{ k8s_ctl_delegate_to }}"
      changed_when: false

    - name: Change temporary directory permissions
      ansible.builtin.file:
        path: "{{ k8s_ctl__tmp_dir.path }}"
        state: directory
        mode: "0755"
      run_once: true
      delegate_to: "{{ k8s_ctl_delegate_to }}"
      changed_when: false

    - name: Copy kube-apiserver-to-kubelet ClusterRole
      ansible.builtin.template:
        src: "rbac/kube-apiserver-to-kubelet_cluster_role.yaml.j2"
        dest: "{{ k8s_ctl__tmp_dir.path }}/kube-apiserver-to-kubelet_cluster_role.yaml"
        mode: 0644
      run_once: true
      delegate_to: "{{ k8s_ctl_delegate_to }}"
      changed_when: false

    - name: Copy kube-apiserver-to-kubelet ClusterRoleBinding
      ansible.builtin.template:
        src: "rbac/kube-apiserver-to-kubelet_cluster_role_binding.yaml.j2"
        dest: "{{ k8s_ctl__tmp_dir.path }}/kube-apiserver-to-kubelet_cluster_role_binding.yaml"
        mode: 0644
      run_once: true
      delegate_to: "{{ k8s_ctl_delegate_to }}"
      changed_when: false

    - name: Apply kube-apiserver-to-kubelet ClusterRole
      kubernetes.core.k8s:
        state: present
        src: "{{ k8s_ctl__tmp_dir.path }}/kube-apiserver-to-kubelet_cluster_role.yaml"
        kubeconfig: "{{ k8s_admin_conf_dir }}/admin.kubeconfig"
      run_once: true
      delegate_to: "{{ k8s_ctl_delegate_to }}"
      changed_when: false

    - name: Apply kube-apiserver-to-kubelet ClusterRoleBinding
      kubernetes.core.k8s:
        state: present
        src: "{{ k8s_ctl__tmp_dir.path }}/kube-apiserver-to-kubelet_cluster_role_binding.yaml"
        kubeconfig: "{{ k8s_admin_conf_dir }}/admin.kubeconfig"
      run_once: true
      delegate_to: "{{ k8s_ctl_delegate_to }}"
      changed_when: false

  always:
    - name: Remove temporary files
      ansible.builtin.file:
        path: "{{ k8s_ctl__tmp_dir.path }}"
        state: absent
      run_once: true
      delegate_to: "{{ k8s_ctl_delegate_to }}"
      changed_when: false
